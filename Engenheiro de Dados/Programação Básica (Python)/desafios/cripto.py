# **Desafio - Mercado Bitcoin (Escopo aberto)**
# Capture e armazene os dados do Mercado Bitcoin, seguindo os seguintes
# requisitos:
# - Crie uma função, que implemente compreensão de listas para extrair dados
#   de ao menos 3 criptomoedas;
# - Crie uma função, que aplique alguma estrutura (alguma limpeza) sobre os
#   dados capturados e os armazene dentro de um arquivo (.csv, .txt, etc.); e
# - Crie uma estratégia que te permita extrair os dados ao menos 5 vezes,
#   durante um período de tempo regularmente espaçado (1 extração por segundo,
#   1 extração por minuto, etc.);

# Author: Daniel Lucas Santos Rocha 
# Email: danielsantos852@gmail.com

# Libraries
import requests as rq   # ...for API requests
import datetime as dt   # ...for time conversion
import csv              # ...for handling csv files
import time             # ...for delay purposes

# Criptos (remove te "#" of the criptos you wish to see)
CRIPTO_NAMES = [
    #'ALICE',    # MyNeighborAlice
    #'APE',      # ApeCoin
    'AXS',      # Axie Infinity
    'BTC',      # Bitcoin
    'DOGE',     # Dogecoin
    'ETH',      # Ethereum
    #'FARM',     # Harvest Finance
    #'MANA',     # MANA (Decentraland)
    #'MVI',      # Metaverse Index
    #'NODL',     # Nodle
    #'SHIB',     # Shiba Inu
    'SLP',      # Smooth Love Potion
]

# Url for the API request
API_URL = ['https://www.mercadobitcoin.net/api/','/ticker/']

# Number of requests
SAMPLE_AMOUNT = 12

# Time between requests (in seconds)
SAMPLE_DELTA = 10


# Main function
def main():

    # Generate csv files for the criptos
    csv_generate_files(names=CRIPTO_NAMES)

    # Do the following [SAMPLE_AMOUNT] times:
    for _ in range(SAMPLE_AMOUNT):
    
        # Get raw data
        data = dataset_get_raw(criptos=CRIPTO_NAMES, url=API_URL)

        # Clean data up
        data = dataset_cleanup(dataset=data)
        
        # Send data to csv files
        csv_update_files(dataset=data)
        
        # Wait for [SAMPLE_DELTA] seconds
        time.sleep(SAMPLE_DELTA)


def csv_generate_files(names:list) -> None:
    
    ''' This function generates a "data_[name].csv" file 
        for each name in a provided names list. '''

    # For each name provided:
    for name in names:
        
        # Generate a csv file with name
        with open('data_'+name+'.csv', 'w') as file:
            
            # Get a dict writer to the file
            writer = csv.DictWriter(file, fieldnames=['value','date'])
            
            # Write file header
            writer.writeheader()


def dataset_get_raw(criptos:list, url:list) -> list:
    
    ''' This function returns a list of dictionaries, each of which referring
        to a cripto in a provided list of cripto names.
        Each dictionary contains 3 key-value pairs, being:
            1. value of the last transaction (as float);
            2. time of transaction (as Unix timestamp);
            3. name of the cripto (as str). '''

    # Create empty dataset
    dataset_raw = list()
    
    # For each cripto in criptos list:
    for cripto in criptos:
        
        # Get cripto ticker (dict) through API request
        ticker = rq.get(url[0]+cripto+url[1]).json()['ticker']

        # Select 'last' (as 'value') and 'date' keys (with values) from ticker
        ticker = {'value' if key=='last' 
                  else key:value for key,value in ticker.items()
                  if key in ['last','date']}

        # Add cripto name as key:value pair in ticker
        ticker['name'] = cripto        
        
        # Append ticker to dataset        
        dataset_raw.append(ticker)

    # Return dataset
    return dataset_raw


def dataset_cleanup(dataset:list) -> list:
    
    ''' This function takes as input a dataset formatted as the ones returned
        by dataset_get_raw() and modifies its dict values as follows:
            - dict['value']: 'R$ 0.00' (str),
            - dict['date']: '0000-00-00 00:00:00' (str). '''
    
    # For each row (dict) in dataset:
    for row in dataset:
        
        # Round value to 2 decimal digits, cast to str, add currency prefix
        row['value'] = 'R$ ' + str(round(float(row['value']),2))
        
        # Convert date from Epoch time to datetime object, cast to str
        row['date'] = str(dt.datetime.fromtimestamp(row['date']))

    # Return dataset
    return dataset


def csv_update_files(dataset:list) -> None:

    ''' This function updates the csv files generated by the
        csv_generate_files() function, taking as input a dataset formatted as
        the ones returned by dataset_cleanup(), and adding a row with value
        and date of last transaction to each "data_[name].csv" file. '''

    # For each row (dict) in dataset:
    for row in dataset:

        # Open the respective "data_[name].csv" file in append mode
        with open('data_'+row['name']+'.csv','a') as file:
            
            # Get a dict writer to the file
            writer = csv.DictWriter(file, fieldnames=['value','date'])
            
            # Add value and date of last transaction in a new row in the file
            writer.writerow({'value': row['value'], 'date': row['date']})


# If cripto.py is being run as a script...
if __name__ == "__main__":
    
    # ...call main function
    main()